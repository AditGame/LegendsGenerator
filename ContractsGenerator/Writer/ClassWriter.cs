// <copyright file="ClassWriter.cs" company="Tom Luppi">
//     Copyright (c) Tom Luppi.  All rights reserved.
// </copyright>

namespace LegendsGenerator.ContractsGenerator.Writer
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    /// <summary>
    /// Writes a class source file.
    /// </summary>
    public class ClassWriter
    {
        /// <summary>
        /// The number of spaces in a tab.
        /// </summary>
        private int tabSpaces = 4;

        /// <summary>
        /// The string builder to write to.
        /// </summary>
        private StringBuilder sb = new StringBuilder();

        /// <summary>
        /// The current tab level.
        /// </summary>
        private int tabLevel = 0;

        /// <summary>
        /// If this is te first element in the file.
        /// </summary>
        private bool firstElement = true;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassWriter"/> class.
        /// </summary>
        /// <param name="info">The class info.</param>
        public ClassWriter(
            ClassDefinition info)
        {
            this.AppendLine("// <auto-generated/>");

            if (info.Nullable)
            {
                this.sb.AppendLine("#nullable enable");
            }

            this.AppendLine($"namespace {info.NameSpace}");
            this.StartBrace();

            foreach (string usingStatement in info.Usings)
            {
                this.AppendLine($"using {usingStatement};");
            }

            this.AppendLine();

            string partialString = info.Partial ? " partial" : string.Empty;
            this.AppendLine($"{info.Access.AccessString()}{partialString} class {info.ClassName}");
            this.StartBrace();
        }

        /// <summary>
        /// The current tab level.
        /// </summary>
        protected int TabLevel
        {
            get
            {
                return this.tabLevel;
            }
            set
            {
                this.tabLevel = value < 0 ? 0 : value;
            }
        }

        /// <summary>
        /// Adds a field to the document.
        /// </summary>
        /// <param name="summary">The summary comment, for the XML documentation.</param>
        /// <param name="type">The type of this field.</param>
        /// <param name="name">The field name.</param>
        /// <param name="value">An optional value to set to the field.</param>
        public void AddField(
            string summary,
            string type,
            string name,
            string? value = null)
        {
            this.AddField(summary, AccessLevel.Private, type, name, value);
        }

        /// <summary>
        /// Adds a field to the document.
        /// </summary>
        /// <param name="summary">The summary comment, for the XML documentation.</param>
        /// <param name="access">The access level of this field.</param>
        /// <param name="type">The type of this field.</param>
        /// <param name="name">The field name.</param>
        /// <param name="value">An optional value to set to the field.</param>
        public void AddField(
            string summary,
            AccessLevel access, 
            string type, 
            string name,
            string? value = null)
        {
            this.ElementSeporator();

            this.SummaryDoc(summary);

            if (value != null)
            {
                this.AppendLine($"{access.AccessString()} {type} {name} = {value};");
            }
            else
            {
                this.AppendLine($"{access.AccessString()} {type} {name};");
            }
        }

        /// <summary>
        /// Adds a property to the document.
        /// </summary>
        /// <param name="summary">The summary comment, for the XML documentation.</param>
        /// <param name="access">The access level of this property.</param>
        /// <param name="type">The type of this property.</param>
        /// <param name="name">The property name.</param>
        /// <param name="value">An optional property to set to the field.</param>
        public void AddProperty(
            string summary,
            AccessLevel access,
            string type,
            string name,
            string? value = null)
        {
            this.ElementSeporator();

            this.SummaryDoc(summary);

            if (value != null)
            {
                this.AppendLine($"{access.AccessString()} {type} {name} {{ get; set; }} = {value};");
            }
            else
            {
                this.AppendLine($"{access.AccessString()} {type} {name} {{ get; set; }}");
            }
        }

        /// <summary>
        /// Adds a mthod to the C# file.
        /// </summary>
        /// <param name="def">The method definition.</param>
        /// <param name="inner">Action which contains the code within the method.</param>
        public void AddMethod(
            MethodDefinition def,
            Action inner)
        {
            this.ElementSeporator();
            def.ToString(this);
            this.StartBrace();
            inner();
            this.EndBrace();
        }

        /// <summary>
        /// Adds a mthod to the C# file.
        /// </summary>
        /// <param name="def">The method definition.</param>
        /// <returns>A disposible object which manages the braces/indentation.</returns>
        public Braces AddMethod(MethodDefinition def)
        {
            this.ElementSeporator();
            def.ToString(this);
            return new Braces(this);
        }

        /// <summary>
        /// Helper to add a dictionary definition to a method.
        /// </summary>
        /// <param name="type">The type, including the dictionary type.</param>
        /// <param name="variableName">The variable name.</param>
        /// <param name="entries">Any and all entries to add to the dictionary as part of initialization.</param>
        public void AddDictionary(string type, string variableName, IDictionary<string, string> entries)
        {
            string definition = $"{type} {variableName} = new {type}()";

            if (entries == null || !entries.Any())
            {
                this.AppendLine(definition + ";");
                return;
            }

            this.AppendLine(definition);

            this.StartBrace();

            foreach (var entry in entries)
            {
                this.AppendLine($@"{{ ""{entry.Key}"", {entry.Value} }},");
            }

            this.EndBrace(true);
            this.AppendLine();
        }

        /// <summary>
        /// Adds a start brace, increasing tab level.
        /// </summary>
        public void StartBrace()
        {
            this.AppendLine("{");
            this.TabLevel++;
        }

        /// <summary>
        /// Adds an end brace, decreating tab level.
        /// </summary>
        /// <param name="withSemicolon">If true, will add a semicolon after the brace.</param>
        public void EndBrace(bool withSemicolon = false)
        {
            this.TabLevel--;
            if (withSemicolon)
            {
                this.AppendLine("};");
            }
            else
            {
                this.AppendLine("}");
            }
        }

        /// <summary>
        /// Adds a summary doc to the document.
        /// </summary>
        /// <param name="docContents">The summary contents.</param>
        public void SummaryDoc(string docContents)
        {
            this.AppendLine($"/// <summary>");
            this.AppendLine($"/// {docContents}");
            this.AppendLine($"/// </summary>");
        }

        /// <summary>
        /// Adds the seporator before an element.
        /// </summary>
        public void ElementSeporator()
        {
            if (this.firstElement)
            {
                this.firstElement = false;
            }
            else
            {
                this.AppendLine();
            }
        }

        /// <summary>
        /// Appends a line with the correct number of spaces.
        /// </summary>
        /// <param name="line">The line.</param>
        public void AppendLine(string? line = null)
        {
            if (line != null)
            {
                string tabs = new string(' ', tabLevel * tabSpaces);
                this.sb.AppendLine(tabs + line);
            }
            else
            {
                this.sb.AppendLine();
            }
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            StringBuilder output = new StringBuilder(this.sb.ToString());
            output.AppendLine(new string(' ', tabSpaces) + "}");
            output.AppendLine("}");

            return output.ToString();
        }
    }
}
